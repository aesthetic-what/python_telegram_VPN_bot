#--------------------------------------------------------libraries--------------------------------------------------------#
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram import F, Router, types, Bot
from aiogram.types import Message
from yoomoney import Quickpay, Client
from datetime import datetime, timedelta

from app.vpn_key.vpn_key_handler import *
from app.sql import DataBase
from app.telegram_config import p2p_token, telegram_token

import string
import random
import asyncio

#-----------------------------------------------------------CONST---------------------------------------------------------#
router = Router()
bot = Bot(token=telegram_token)
db = DataBase(r'Database.db')
#-----------------------------------------------------------logic----------------------------------------------------------#
@router.message(F.photo)
async def photot_handler(message: Message):
    photo_data = message.photo[-1]
    await message.answer(f'{photo_data}')

@router.message(CommandStart())
async def cmd_start(message: Message):
    print("bot started")
    try:
        user_ID = message.chat.id
        username = message.chat.username
        print(f'user_id: {user_ID}')
        print(f'username: {username}')
        await db.add_user(user_ID, username)
    except Exception:
        pass
    finally:
        await message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤–ø–Ωüåç', reply_markup=bot_keyboard)
        data = await db.get_info()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data}')

@router.callback_query(F.data == 'buy')
async def health(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:",
        reply_markup=take_tarif_keyboard)

@router.callback_query(F.data == '1_month')
async def pay_1_mnth(call: types.CallbackQuery):

    letters_and_digits = string.ascii_lowercase + string.digits
    rand_str = ''.join(random.sample(letters_and_digits, 10))

    await bot.answer_callback_query(call.id)
    quickpay_1_mnth= Quickpay(
        receiver=4100118858023438,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü",
        paymentType="SB",
        sum=120,
        label=rand_str
    )
    payment_url_one = quickpay_1_mnth.redirected_url
    await db.update_label(rand_str, call.message.chat.id)

    # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN.\n–°—Ä–æ–∫: <b>1 –º–µ—Å—è—Ü</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>120 —Ä—É–±</b>',
        parse_mode='HTML',
        reply_markup=payment_keyboard_1(payment_url_one)  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )

@router.callback_query(F.data == '3_month')
async def pay_3_mnth(call: types.CallbackQuery):
    letters_and_digits = string.ascii_lowercase + string.digits
    rand_str = ''.join(random.sample(letters_and_digits, 10))

    await bot.answer_callback_query(call.id)
    quickpay_3_mnth= Quickpay(
        receiver=4100118858023438,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞",
        paymentType="SB",
        sum=300,
        label=rand_str
    )
    payment_url_three = quickpay_3_mnth.redirected_url
    await db.update_label(rand_str, call.message.chat.id)

    # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN.\n–°—Ä–æ–∫: <b>3 –º–µ—Å—è—Ü–∞</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>300 —Ä—É–±</b>',
        parse_mode='HTML',
        reply_markup=payment_keyboard_3(payment_url_three)  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )


@router.callback_query(F.data == 'buy_again')
async def buy_again(call: types.CallbackQuery):
    letters_and_digits = string.ascii_lowercase + string.digits
    rand_str = ''.join(random.sample(letters_and_digits, 10))

    await bot.answer_callback_query(call.id)
    quickpay_one_more= Quickpay(
        receiver=4100118858023438,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü",
        paymentType="SB",
        sum=120,
        label=rand_str
    )
    payment_url_one_more = quickpay_one_more.redirected_url
    await db.update_label(rand_str, call.message.chat.id)
    # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN.\n–°—Ä–æ–∫: <b>1 –º–µ—Å—è—Ü</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>120 —Ä—É–±</b>',
        parse_mode='HTML',
        reply_markup=payment_keyboard_again(payment_url_one_more)  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )


@router.callback_query(F.data == "about")
async def about(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.reply('–Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –í–ü–ù –ø–æ–¥–ø–∏—Å–∫–∏.\n'
                         '–°–µ—Ä–≤–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–ü–ù - –°—Ç–æ–∫–≥–æ–ª—å–º\n'
                         '–ö–ª–∏–µ–Ω—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –í–ü–ù - outline')

@router.callback_query(F.data == 'check')
async def check(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    print(call.message.chat.id)
    data = await db.get_payment_status(call.message.chat.id)
    client_tg = Client(p2p_token)
    print(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}')
    bought = data[0][0]
    label = data[0][1]
    print(f'—Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏: {bought}\n')
    print(f'–∏–Ω–¥–µ—Ñ–∏–∫–∞—Ç–æ—Ä: {label}\n\n')
    if bought == 0:
        print(f'—Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏: {bought}')
        print(f'–∏–Ω–¥–µ—Ñ–∏–∫–∞—Ç–æ—Ä: {label}')
        try:
            history = client_tg.operation_history(label=label)
            for operation in history.operations:
                print(f'–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.operation_id}')
                print(f'–¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {operation.datetime}')
                print(f'—Å—Ç–∞—Ç—É—Å: {operation.status}\n\n')
            operation = history.operations[-1]
            print(f'—Å—Ç–∞—Ç—É—Å: {operation.status}')
            if operation.status == 'success':
                print(f'–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {operation.datetime}')
                await db.update_payment_status(call.message.chat.id, True)
                vpn = create_new_key(name=str(call.message.chat.id), data_limit_gb=500)
                vpn_key = vpn.access_url
                print(f'vpn_key: {vpn_key}\n\n')
                print(type(vpn_key))
                await db.add_vpn_key(vpn_key, call.message.chat.id)
                if operation.amount <= 120:
                    await db.get_user_id_data()
                    db.add_sub_1month(call.message.chat.id)
                elif operation.amount <= 300 and operation.amount >= 130:
                    db.add_sub_3month(call.message.chat.id)
                await call.message.answer(f'–£—Å–ø–µ—à–Ω–æ!\n–í–∞—à –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–ø–Ω:\n<code>{vpn_key}</code>\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n'
                                            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–ª—è –≤–∞—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n',
                                            reply_markup=platform_links_keyboard, 
                                            parse_mode='HTML')
                
                await bot.send_message(chat_id=863618184, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É')
        except Exception:
            await call.message.answer("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∞, –∏–ª–∏ –æ–Ω–∞ –≤ –ø—É—Ç–∏...")
    else:
        check_vpn = await db.check_vpn_key(call.message.chat.id)
        db_vpn_key = check_vpn[0][0]
        print(db_vpn_key)
        if db_vpn_key == None:
            vpn = create_new_key(name=str(call.message.chat.id), data_limit_gb=500)
            vpn_key = vpn.access_url
            print(f'vpn_key: {vpn_key}\n\n')
            print(type(vpn_key))
            await db.add_vpn_key(vpn_key ,call.message.chat.id)
            await call.message.answer(f'–£—Å–ø–µ—à–Ω–æ!\n–í–∞—à –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–ø–Ω:\n<code>{vpn_key}</code>\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n'
                                            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–ª—è –≤–∞—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n',
                                            reply_markup=platform_links_keyboard, 
                                            parse_mode='HTML')
        else:
            data_vpn = await db.take_vpn_key(call.message.chat.id)
            vpn_key_take = data_vpn[0][0]
            await call.message.answer(f'–í–∞—à –∫–ª—é—á:\n<code>{vpn_key_take}</code>\n'
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–ª—è –≤–∞—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n',
                                        reply_markup=platform_links_keyboard, 
                                        parse_mode='HTML')

@router.callback_query(F.data == 'check_data')
async def connect_andoid(call: types.CallbackQuery):
    await call.message.answer('–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: –¥–Ω–µ–π')

@router.callback_query(F.data == 'connect_andr')
async def connect_andoid(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer("–ò–Ω—Å—Ç—É—Ä–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–ø–Ω –Ω–∞ –∞–Ω–¥—Ä–æ–∏–¥:\n"
                              '1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ "outline" (–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É: C–∫–∞—á–∞—Ç—å ü§ñ)\n'
                              '2. –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á –≤—ã–¥–∞–Ω—ã–π –±–æ—Ç–æ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∏–µ–Ω—Ç\n'
                              '–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–∫–æ–ø–∏—Ä—É–µ—Ç–µ –∫–ª—é—á, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–ø–Ω'
                              '3. –ì–æ—Ç–æ–≤–æ, –≤–ø–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
    
@router.callback_query(F.data == 'connect_apl')
async def connect_andoid(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer("–ò–Ω—Å—Ç—É—Ä–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–ø–Ω –Ω–∞ –∞–π—Ñ–æ–Ω:\n"
                              '1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ "outline" (–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É: C–∫–∞—á–∞—Ç—å üçé)\n'
                              '2. –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á –≤—ã–¥–∞–Ω—ã–π –±–æ—Ç–æ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∏–µ–Ω—Ç\n'
                              '–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–∫–æ–ø–∏—Ä—É–µ—Ç–µ –∫–ª—é—á, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–ø–Ω'
                              '3. –ì–æ—Ç–æ–≤–æ, –≤–ø–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')

@router.callback_query(F.data == 'connect_pc')
async def connect_andoid(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer("–ò–Ω—Å—Ç—É—Ä–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–ø–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä:\n"
                              '1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ "outline" (–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É: C–∫–∞—á–∞—Ç—å üíª)\n'
                              '2. –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á –≤—ã–¥–∞–Ω—ã–π –±–æ—Ç–æ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∏–µ–Ω—Ç\n'
                              '–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–∫–æ–ø–∏—Ä—É–µ—Ç–µ –∫–ª—é—á, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–ø–Ω'
                              '3. –ì–æ—Ç–æ–≤–æ, –≤–ø–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
    

@router.callback_query(F.data == 'android')
async def con_andr(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    data_vpn = await db.take_vpn_key(call.message.chat.id)
    vpn_key_take = data_vpn[0][0]
    await bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.message_id, 
                                text=f"–í–∞—à –∫–ª—é—á:\n<code>{vpn_key_take}</code>\n"
                                     f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: Android ü§ñ", 
                                reply_markup=android_links_keyboard,
                                parse_mode='HTML')

@router.callback_query(F.data == 'apple')
async def con_apple(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    data_vpn = await db.take_vpn_key(call.message.chat.id)
    vpn_key_take = data_vpn[0][0]
    await bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.message_id, 
                                text=f"–í–∞—à –∫–ª—é—á:\n<code>{vpn_key_take}</code>\n"
                                     f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: Iphone üçé", 
                                reply_markup=iphone_links_keyboard,
                                parse_mode='HTML')

@router.callback_query(F.data == 'pc')
async def con_pc(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    data_vpn = await db.take_vpn_key(call.message.chat.id)
    vpn_key_take = data_vpn[0][0]
    await bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.message_id, 
                                text=f"–í–∞—à –∫–ª—é—á:\n<code>{vpn_key_take}</code>\n"
                                     f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: PC üíª", 
                                reply_markup=pc_links_keyboard,
                                parse_mode='HTML')

@router.callback_query(F.data == 'back_tarif')
async def main_menu(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤–ø–Ω üåç',
        reply_markup=bot_keyboard)

@router.callback_query(F.data == 'back_month')
async def tarif(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:",
        reply_markup=take_tarif_keyboard)

@router.callback_query(F.data == 'back_again')
async def tarif(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:",
        reply_markup=take_tarif_keyboard)

@router.callback_query(F.data == 'back_3_month')
async def tarif(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:",
        reply_markup=take_tarif_keyboard)

@router.callback_query(F.data == 'back_platform')
async def bak_to_menu(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    data_vpn = await db.take_vpn_key(call.message.chat.id)
    vpn_key_take = data_vpn[0][0]
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–í–∞—à –∫–ª—é—á:\n<code>{vpn_key_take}</code>\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–ª—è –≤–∞—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n',
                reply_markup=platform_links_keyboard, 
                parse_mode='HTML')

@router.callback_query(F.data == 'back_to_menu')
async def bak_to_menu(call: types.CallbackQuery):
    try:
        user_ID = call.message.chat.id
        username = call.message.chat.username
        print(f'user_id: {user_ID}')
        print(f'username: {username}')
        await db.add_user(user_ID, username)
    except Exception:
        pass
    finally:
        await call.message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤–ø–Ω üåç', reply_markup=bot_keyboard)
        data = await db.get_info()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data}')

#--------------------------------------------------------------Keyboards-------------------------------------------------------------------------#
bot_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
                     [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
                     [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_again")],
                     [InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å", callback_data="check_data")],
                     [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")],
                    ])

delete_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
                     [InlineKeyboardButton(text="–î–∞", callback_data="yes")],
                     [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")]])

take_tarif_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='1 –º–µ—Å—è—Ü', callback_data='1_month')],
        [InlineKeyboardButton(text='3 –º–µ—Å—è—Ü–∞', callback_data='3_month')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_tarif')]])

android_links_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='C–∫–∞—á–∞—Ç—å ü§ñ', url='https://play.google.com/store/apps/details?id=org.outline.android.client'), 
                      InlineKeyboardButton(text='–ü–æ–¥–∫–ª—é—á–∏—Ç—å ü§ñ', callback_data='connect_andr')],
                      [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_platform')]])

iphone_links_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å üçé', url='https://apps.apple.com/ru/app/outline-app/id1356177741?l=ru'), 
                      InlineKeyboardButton(text='–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è üçé', callback_data='connect_apl')],
                      [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_platform')]])

pc_links_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å üíª', url='https://github.com/Jigsaw-Code/outline-apps/releases/download/v1.10.1/Outline-Client.exe'), 
                      InlineKeyboardButton(text='–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è üíª', callback_data='connect_pc')],
                      [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_platform')]])

platform_links_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='android ü§ñ', callback_data='android'),
                     InlineKeyboardButton(text='iphone üçé', callback_data='apple')],
                     [InlineKeyboardButton(text='windows/linux/mac os üíª', callback_data='pc')],
                     [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='Back_to_menu')]])

def payment_keyboard_1(payment_url):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url)],
        [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_month')]])

def payment_keyboard_again(payment_url):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url=payment_url)],
        [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_again')]])

def payment_keyboard_3(payment_url):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url)],
        [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_3_month')]])
        
    
client_tg = Client(p2p_token)
history = client_tg.operation_history()
operation = history.operations[-1].status
print(operation)
